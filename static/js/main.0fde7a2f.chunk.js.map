{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","value","target","name","formData","state","setState","handlePredictClick","isLoading","fetch","headers","Accept","Content-Type","method","body","JSON","stringify","then","response","json","result","handleCancelClick","Age","Na_to_K","Sex","BP","Cholesterol","prediction","react_default","a","createElement","Container_default","className","Form_default","Row","Group","as","Col","Label","Control","type","placeholder","onChange","Row_default","Col_default","Button_default","block","variant","disabled","onClick","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0fde7a2f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isLoading: false,\r\n      formData: {\r\n        Age: '',\r\n        Na_to_K: '',\r\n        Sex: 1,\r\n        BP: 1,\r\n        Cholesterol: 1\r\n      },\r\n      prediction: \"\"\r\n    };\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    const value = event.target.value;\r\n    const name = event.target.name;\r\n    var formData = this.state.formData;\r\n    formData[name] = value;\r\n    this.setState({\r\n      formData\r\n    });\r\n  }\r\n\r\n  handlePredictClick = (event) => {\r\n    const formData = this.state.formData;\r\n    this.setState({ isLoading: true });\r\n    fetch('https://drug-prediction.herokuapp.com//prediction', \r\n      {\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        method: 'POST',\r\n        body: JSON.stringify(formData)\r\n      })\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        this.setState({\r\n          result: response.result,\r\n          isLoading: false\r\n        });\r\n      });\r\n  }\r\n\r\n  handleCancelClick = (event) => {\r\n    this.setState({ result: \"\" });\r\n  }\r\n\r\n  render() {\r\n    const isLoading = this.state.isLoading;\r\n    const formData = this.state.formData;\r\n    const result = this.state.result;\r\n\r\n    return (\r\n      <Container>\r\n        <div>\r\n          <h1 className=\"title\">Drug Predictive Model app</h1>\r\n        </div>\r\n        <div className=\"content\">\r\n          <Form>\r\n            <Form.Row>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Patient Age</Form.Label>\r\n                <Form.Control \r\n                  type=\"text\" \r\n                  placeholder=\"Input age of patient\" \r\n                  name=\"Age\"\r\n                  value={formData.Age}\r\n                  onChange={this.handleChange} />\r\n              </Form.Group>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Blood levels of Na, K</Form.Label>\r\n                <Form.Control \r\n                  type=\"text\" \r\n                  placeholder=\"Input Na and K level of patient\" \r\n                  name=\"Na_to_K\"\r\n                  value={formData.Na_to_K}\r\n                  onChange={this.handleChange} />\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Gender of patient</Form.Label>\r\n                <Form.Control \r\n                  as=\"select\"\r\n                  value={formData.Sex}\r\n                  \r\n                  name=\"Sex\"\r\n                  onChange={this.handleChange}>\r\n                  <option>0</option>\r\n                  <option>1</option>\r\n          \r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Blood pressure</Form.Label>\r\n                <Form.Control \r\n                  as=\"select\"\r\n                  value={formData.BP}\r\n                  name=\"BP\"\r\n                  onChange={this.handleChange}>\r\n                  <option>0</option>\r\n                  <option>1</option>\r\n                  <option>2</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Cholesterol level</Form.Label>\r\n                <Form.Control \r\n                  as=\"select\"\r\n                  value={formData.Cholesterol}\r\n                  name=\"Cholesterol\"\r\n                  onChange={this.handleChange}>\r\n                  <option>0</option>\r\n                  <option>1</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Row>\r\n              <Col>\r\n                <Button\r\n                  block\r\n                  variant=\"success\"\r\n                  disabled={isLoading}\r\n                  onClick={!isLoading ? this.handlePredictClick :null}>\r\n                  { isLoading ? 'Making prediction' : 'Prediction' }\r\n                </Button>\r\n              </Col>\r\n              <Col>\r\n                <Button\r\n                  block\r\n                  variant=\"danger\"\r\n                  disabled={isLoading}\r\n                  onClick={this.handleCancelClick}>\r\n                  Reset prediction\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n          {result === \"\" ? null :\r\n            (<Row>\r\n              <Col className=\"result-container\">\r\n                <h5 id=\"result\">{result}</h5>\r\n              </Col>\r\n            </Row>)\r\n          }\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}